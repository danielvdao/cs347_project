DROP SEQUENCE NL_Adminship_seq ; 
create sequence NL_Adminship_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger NL_Adminship_PK_trig 
before insert on NL_Adminship
for each row 
begin 
select NL_Adminship_seq.nextval into :new.adminship_id from dual; 
end; 
/
alter table NL_Adminship add created date ; 
alter table NL_Adminship add created_by VARCHAR2 (255) ; 
alter table NL_Adminship add row_version_number integer ; 
alter table NL_Adminship add updated date ; 
alter table NL_Adminship add updated_by VARCHAR2 (255) ; 
/
create or replace trigger NL_Adminship_AUD_trig 
before insert or update on NL_Adminship 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE NL_Documents_seq ; 
create sequence NL_Documents_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger NL_Documents_PK_trig 
before insert on NL_Documents
for each row 
begin 
select NL_Documents_seq.nextval into :new.doc_id from dual; 
end; 
/
alter table NL_Documents add created date ; 
alter table NL_Documents add created_by VARCHAR2 (255) ; 
alter table NL_Documents add row_version_number integer ; 
alter table NL_Documents add updated date ; 
alter table NL_Documents add updated_by VARCHAR2 (255) ; 
/
create or replace trigger NL_Documents_AUD_trig 
before insert or update on NL_Documents 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE NL_List_Member_seq ; 
create sequence NL_List_Member_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger NL_List_Member_PK_trig 
before insert on NL_List_Member
for each row 
begin 
select NL_List_Member_seq.nextval into :new.NL_membership_id from dual; 
end; 
/
alter table NL_List_Member add created date ; 
alter table NL_List_Member add created_by VARCHAR2 (255) ; 
alter table NL_List_Member add row_version_number integer ; 
alter table NL_List_Member add updated date ; 
alter table NL_List_Member add updated_by VARCHAR2 (255) ; 
/
create or replace trigger NL_List_Member_AUD_trig 
before insert or update on NL_List_Member 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE NL_Member_seq ; 
create sequence NL_Member_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger NL_Member_PK_trig 
before insert on NL_Member
for each row 
begin 
select NL_Member_seq.nextval into :new.member_id from dual; 
end; 
/
alter table NL_Member add created date ; 
alter table NL_Member add created_by VARCHAR2 (255) ; 
alter table NL_Member add row_version_number integer ; 
alter table NL_Member add updated date ; 
alter table NL_Member add updated_by VARCHAR2 (255) ; 
/
create or replace trigger NL_Member_AUD_trig 
before insert or update on NL_Member 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE NL_Users_seq ; 
create sequence NL_Users_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger NL_Users_PK_trig 
before insert on NL_Users
for each row 
begin 
select NL_Users_seq.nextval into :new.user_id from dual; 
end; 
/
alter table NL_Users add created date ; 
alter table NL_Users add created_by VARCHAR2 (255) ; 
alter table NL_Users add row_version_number integer ; 
alter table NL_Users add updated date ; 
alter table NL_Users add updated_by VARCHAR2 (255) ; 
/
create or replace trigger NL_Users_AUD_trig 
before insert or update on NL_Users 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX NL_Member_member_id_FK_0 ;
CREATE INDEX NL_Member_member_id_FK_0 ON NL_Adminship(NL_Member_member_id) ;
DROP INDEX NL_Users_user_id_FK_1 ;
CREATE INDEX NL_Users_user_id_FK_1 ON NL_Adminship(NL_Users_user_id) ;
DROP INDEX NL_Member_member_id_FK_2 ;
CREATE INDEX NL_Member_member_id_FK_2 ON NL_Documents(NL_Member_member_id) ;
DROP INDEX NL_Member_member_id_FK_3 ;
CREATE INDEX NL_Member_member_id_FK_3 ON NL_List_Member(NL_Member_member_id) ;
DROP INDEX NL_Member_member_id1_FK_4 ;
CREATE INDEX NL_Member_member_id1_FK_4 ON NL_List_Member(NL_Member_member_id1) ;
DROP INDEX NL_Users_user_id_FK_5 ;
CREATE INDEX NL_Users_user_id_FK_5 ON NL_Member(NL_Users_user_id) ;
DROP INDEX NL_Member_member_id_FK_6 ;
CREATE INDEX NL_Member_member_id_FK_6 ON NL_Users(NL_Member_member_id) ;
